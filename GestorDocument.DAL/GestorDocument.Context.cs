//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace GestorDocument.DAL
{
    public partial class GestorDocumentEntities : ObjectContext
    {
        public const string ConnectionString = "name=GestorDocumentEntities";
        public const string ContainerName = "GestorDocumentEntities";
    
        #region Constructors
    
        public GestorDocumentEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public GestorDocumentEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        public GestorDocumentEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = true;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<APP_ROL> APP_ROL
        {
            get { return _aPP_ROL  ?? (_aPP_ROL = CreateObjectSet<APP_ROL>("APP_ROL")); }
        }
        private ObjectSet<APP_ROL> _aPP_ROL;
    
        public ObjectSet<APP_USUARIO> APP_USUARIO
        {
            get { return _aPP_USUARIO  ?? (_aPP_USUARIO = CreateObjectSet<APP_USUARIO>("APP_USUARIO")); }
        }
        private ObjectSet<APP_USUARIO> _aPP_USUARIO;
    
        public ObjectSet<CAT_DETERMINANTE> CAT_DETERMINANTE
        {
            get { return _cAT_DETERMINANTE  ?? (_cAT_DETERMINANTE = CreateObjectSet<CAT_DETERMINANTE>("CAT_DETERMINANTE")); }
        }
        private ObjectSet<CAT_DETERMINANTE> _cAT_DETERMINANTE;
    
        public ObjectSet<CAT_INSTRUCCION> CAT_INSTRUCCION
        {
            get { return _cAT_INSTRUCCION  ?? (_cAT_INSTRUCCION = CreateObjectSet<CAT_INSTRUCCION>("CAT_INSTRUCCION")); }
        }
        private ObjectSet<CAT_INSTRUCCION> _cAT_INSTRUCCION;
    
        public ObjectSet<CAT_ORGANIGRAMA> CAT_ORGANIGRAMA
        {
            get { return _cAT_ORGANIGRAMA  ?? (_cAT_ORGANIGRAMA = CreateObjectSet<CAT_ORGANIGRAMA>("CAT_ORGANIGRAMA")); }
        }
        private ObjectSet<CAT_ORGANIGRAMA> _cAT_ORGANIGRAMA;
    
        public ObjectSet<CAT_PRIORIDAD> CAT_PRIORIDAD
        {
            get { return _cAT_PRIORIDAD  ?? (_cAT_PRIORIDAD = CreateObjectSet<CAT_PRIORIDAD>("CAT_PRIORIDAD")); }
        }
        private ObjectSet<CAT_PRIORIDAD> _cAT_PRIORIDAD;
    
        public ObjectSet<CAT_STATUS_ASUNTO> CAT_STATUS_ASUNTO
        {
            get { return _cAT_STATUS_ASUNTO  ?? (_cAT_STATUS_ASUNTO = CreateObjectSet<CAT_STATUS_ASUNTO>("CAT_STATUS_ASUNTO")); }
        }
        private ObjectSet<CAT_STATUS_ASUNTO> _cAT_STATUS_ASUNTO;
    
        public ObjectSet<CAT_STATUS_TURNO> CAT_STATUS_TURNO
        {
            get { return _cAT_STATUS_TURNO  ?? (_cAT_STATUS_TURNO = CreateObjectSet<CAT_STATUS_TURNO>("CAT_STATUS_TURNO")); }
        }
        private ObjectSet<CAT_STATUS_TURNO> _cAT_STATUS_TURNO;
    
        public ObjectSet<CAT_TIPO_DETERMINANTE> CAT_TIPO_DETERMINANTE
        {
            get { return _cAT_TIPO_DETERMINANTE  ?? (_cAT_TIPO_DETERMINANTE = CreateObjectSet<CAT_TIPO_DETERMINANTE>("CAT_TIPO_DETERMINANTE")); }
        }
        private ObjectSet<CAT_TIPO_DETERMINANTE> _cAT_TIPO_DETERMINANTE;
    
        public ObjectSet<CAT_TIPO_DOCUMENTO> CAT_TIPO_DOCUMENTO
        {
            get { return _cAT_TIPO_DOCUMENTO  ?? (_cAT_TIPO_DOCUMENTO = CreateObjectSet<CAT_TIPO_DOCUMENTO>("CAT_TIPO_DOCUMENTO")); }
        }
        private ObjectSet<CAT_TIPO_DOCUMENTO> _cAT_TIPO_DOCUMENTO;
    
        public ObjectSet<CAT_UBICACION> CAT_UBICACION
        {
            get { return _cAT_UBICACION  ?? (_cAT_UBICACION = CreateObjectSet<CAT_UBICACION>("CAT_UBICACION")); }
        }
        private ObjectSet<CAT_UBICACION> _cAT_UBICACION;
    
        public ObjectSet<GET_ASUNTO> GET_ASUNTO
        {
            get { return _gET_ASUNTO  ?? (_gET_ASUNTO = CreateObjectSet<GET_ASUNTO>("GET_ASUNTO")); }
        }
        private ObjectSet<GET_ASUNTO> _gET_ASUNTO;
    
        public ObjectSet<GET_DOCUMENTOS> GET_DOCUMENTOS
        {
            get { return _gET_DOCUMENTOS  ?? (_gET_DOCUMENTOS = CreateObjectSet<GET_DOCUMENTOS>("GET_DOCUMENTOS")); }
        }
        private ObjectSet<GET_DOCUMENTOS> _gET_DOCUMENTOS;
    
        public ObjectSet<GET_EXPEDIENTE> GET_EXPEDIENTE
        {
            get { return _gET_EXPEDIENTE  ?? (_gET_EXPEDIENTE = CreateObjectSet<GET_EXPEDIENTE>("GET_EXPEDIENTE")); }
        }
        private ObjectSet<GET_EXPEDIENTE> _gET_EXPEDIENTE;
    
        public ObjectSet<GET_FECHA_VENCIMIENTO> GET_FECHA_VENCIMIENTO
        {
            get { return _gET_FECHA_VENCIMIENTO  ?? (_gET_FECHA_VENCIMIENTO = CreateObjectSet<GET_FECHA_VENCIMIENTO>("GET_FECHA_VENCIMIENTO")); }
        }
        private ObjectSet<GET_FECHA_VENCIMIENTO> _gET_FECHA_VENCIMIENTO;
    
        public ObjectSet<GET_TURNO> GET_TURNO
        {
            get { return _gET_TURNO  ?? (_gET_TURNO = CreateObjectSet<GET_TURNO>("GET_TURNO")); }
        }
        private ObjectSet<GET_TURNO> _gET_TURNO;
    
        public ObjectSet<INF_ACCION> INF_ACCION
        {
            get { return _iNF_ACCION  ?? (_iNF_ACCION = CreateObjectSet<INF_ACCION>("INF_ACCION")); }
        }
        private ObjectSet<INF_ACCION> _iNF_ACCION;
    
        public ObjectSet<INF_FORM> INF_FORM
        {
            get { return _iNF_FORM  ?? (_iNF_FORM = CreateObjectSet<INF_FORM>("INF_FORM")); }
        }
        private ObjectSet<INF_FORM> _iNF_FORM;
    
        public ObjectSet<INF_INFODOC> INF_INFODOC
        {
            get { return _iNF_INFODOC  ?? (_iNF_INFODOC = CreateObjectSet<INF_INFODOC>("INF_INFODOC")); }
        }
        private ObjectSet<INF_INFODOC> _iNF_INFODOC;
    
        public ObjectSet<REL_DESTINATARIO> REL_DESTINATARIO
        {
            get { return _rEL_DESTINATARIO  ?? (_rEL_DESTINATARIO = CreateObjectSet<REL_DESTINATARIO>("REL_DESTINATARIO")); }
        }
        private ObjectSet<REL_DESTINATARIO> _rEL_DESTINATARIO;
    
        public ObjectSet<REL_SIGNATARIO> REL_SIGNATARIO
        {
            get { return _rEL_SIGNATARIO  ?? (_rEL_SIGNATARIO = CreateObjectSet<REL_SIGNATARIO>("REL_SIGNATARIO")); }
        }
        private ObjectSet<REL_SIGNATARIO> _rEL_SIGNATARIO;
    
        public ObjectSet<CAT_TIPO_UNIDAD_NORMATIVA> CAT_TIPO_UNIDAD_NORMATIVA
        {
            get { return _cAT_TIPO_UNIDAD_NORMATIVA  ?? (_cAT_TIPO_UNIDAD_NORMATIVA = CreateObjectSet<CAT_TIPO_UNIDAD_NORMATIVA>("CAT_TIPO_UNIDAD_NORMATIVA")); }
        }
        private ObjectSet<CAT_TIPO_UNIDAD_NORMATIVA> _cAT_TIPO_UNIDAD_NORMATIVA;
    
        public ObjectSet<CAT_TIPO_EXTENCION> CAT_TIPO_EXTENCION
        {
            get { return _cAT_TIPO_EXTENCION  ?? (_cAT_TIPO_EXTENCION = CreateObjectSet<CAT_TIPO_EXTENCION>("CAT_TIPO_EXTENCION")); }
        }
        private ObjectSet<CAT_TIPO_EXTENCION> _cAT_TIPO_EXTENCION;
    
        public ObjectSet<MODIFIEDDATA> MODIFIEDDATAs
        {
            get { return _mODIFIEDDATAs  ?? (_mODIFIEDDATAs = CreateObjectSet<MODIFIEDDATA>("MODIFIEDDATAs")); }
        }
        private ObjectSet<MODIFIEDDATA> _mODIFIEDDATAs;
    
        public ObjectSet<SYNCTABLE> SYNCTABLEs
        {
            get { return _sYNCTABLEs  ?? (_sYNCTABLEs = CreateObjectSet<SYNCTABLE>("SYNCTABLEs")); }
        }
        private ObjectSet<SYNCTABLE> _sYNCTABLEs;
    
        public ObjectSet<SYNC_DOC> SYNC_DOC
        {
            get { return _sYNC_DOC  ?? (_sYNC_DOC = CreateObjectSet<SYNC_DOC>("SYNC_DOC")); }
        }
        private ObjectSet<SYNC_DOC> _sYNC_DOC;
    
        public ObjectSet<APP_MENU> APP_MENU
        {
            get { return _aPP_MENU  ?? (_aPP_MENU = CreateObjectSet<APP_MENU>("APP_MENU")); }
        }
        private ObjectSet<APP_MENU> _aPP_MENU;
    
        public ObjectSet<REL_DESTINATARIO_CCP> REL_DESTINATARIO_CCP
        {
            get { return _rEL_DESTINATARIO_CCP  ?? (_rEL_DESTINATARIO_CCP = CreateObjectSet<REL_DESTINATARIO_CCP>("REL_DESTINATARIO_CCP")); }
        }
        private ObjectSet<REL_DESTINATARIO_CCP> _rEL_DESTINATARIO_CCP;
    
        public ObjectSet<REL_SIGNATARIO_EXTERNO> REL_SIGNATARIO_EXTERNO
        {
            get { return _rEL_SIGNATARIO_EXTERNO  ?? (_rEL_SIGNATARIO_EXTERNO = CreateObjectSet<REL_SIGNATARIO_EXTERNO>("REL_SIGNATARIO_EXTERNO")); }
        }
        private ObjectSet<REL_SIGNATARIO_EXTERNO> _rEL_SIGNATARIO_EXTERNO;
    
        public ObjectSet<CAT_SESION> CAT_SESION
        {
            get { return _cAT_SESION  ?? (_cAT_SESION = CreateObjectSet<CAT_SESION>("CAT_SESION")); }
        }
        private ObjectSet<CAT_SESION> _cAT_SESION;
    
        public ObjectSet<APP_ROL_MENU> APP_ROL_MENU
        {
            get { return _aPP_ROL_MENU  ?? (_aPP_ROL_MENU = CreateObjectSet<APP_ROL_MENU>("APP_ROL_MENU")); }
        }
        private ObjectSet<APP_ROL_MENU> _aPP_ROL_MENU;
    
        public ObjectSet<APP_USUARIO_ROL> APP_USUARIO_ROL
        {
            get { return _aPP_USUARIO_ROL  ?? (_aPP_USUARIO_ROL = CreateObjectSet<APP_USUARIO_ROL>("APP_USUARIO_ROL")); }
        }
        private ObjectSet<APP_USUARIO_ROL> _aPP_USUARIO_ROL;

        #endregion
        #region Function Imports
        public ObjectResult<GET_ASUNTO> GetAsuntos(string prioridad, string statusAsunto, string destinatario, string signatario, Nullable<System.DateTime> rangoFechaDesde, Nullable<System.DateTime> rangoFechaHasta, string folio, string titulo, string descripcion, string documentoName)
        {
    
            ObjectParameter prioridadParameter;
    
            if (prioridad != null)
            {
                prioridadParameter = new ObjectParameter("Prioridad", prioridad);
            }
            else
            {
                prioridadParameter = new ObjectParameter("Prioridad", typeof(string));
            }
    
            ObjectParameter statusAsuntoParameter;
    
            if (statusAsunto != null)
            {
                statusAsuntoParameter = new ObjectParameter("StatusAsunto", statusAsunto);
            }
            else
            {
                statusAsuntoParameter = new ObjectParameter("StatusAsunto", typeof(string));
            }
    
            ObjectParameter destinatarioParameter;
    
            if (destinatario != null)
            {
                destinatarioParameter = new ObjectParameter("Destinatario", destinatario);
            }
            else
            {
                destinatarioParameter = new ObjectParameter("Destinatario", typeof(string));
            }
    
            ObjectParameter signatarioParameter;
    
            if (signatario != null)
            {
                signatarioParameter = new ObjectParameter("Signatario", signatario);
            }
            else
            {
                signatarioParameter = new ObjectParameter("Signatario", typeof(string));
            }
    
            ObjectParameter rangoFechaDesdeParameter;
    
            if (rangoFechaDesde.HasValue)
            {
                rangoFechaDesdeParameter = new ObjectParameter("RangoFechaDesde", rangoFechaDesde);
            }
            else
            {
                rangoFechaDesdeParameter = new ObjectParameter("RangoFechaDesde", typeof(System.DateTime));
            }
    
            ObjectParameter rangoFechaHastaParameter;
    
            if (rangoFechaHasta.HasValue)
            {
                rangoFechaHastaParameter = new ObjectParameter("RangoFechaHasta", rangoFechaHasta);
            }
            else
            {
                rangoFechaHastaParameter = new ObjectParameter("RangoFechaHasta", typeof(System.DateTime));
            }
    
            ObjectParameter folioParameter;
    
            if (folio != null)
            {
                folioParameter = new ObjectParameter("Folio", folio);
            }
            else
            {
                folioParameter = new ObjectParameter("Folio", typeof(string));
            }
    
            ObjectParameter tituloParameter;
    
            if (titulo != null)
            {
                tituloParameter = new ObjectParameter("Titulo", titulo);
            }
            else
            {
                tituloParameter = new ObjectParameter("Titulo", typeof(string));
            }
    
            ObjectParameter descripcionParameter;
    
            if (descripcion != null)
            {
                descripcionParameter = new ObjectParameter("Descripcion", descripcion);
            }
            else
            {
                descripcionParameter = new ObjectParameter("Descripcion", typeof(string));
            }
    
            ObjectParameter documentoNameParameter;
    
            if (documentoName != null)
            {
                documentoNameParameter = new ObjectParameter("DocumentoName", documentoName);
            }
            else
            {
                documentoNameParameter = new ObjectParameter("DocumentoName", typeof(string));
            }
            return base.ExecuteFunction<GET_ASUNTO>("GetAsuntos", prioridadParameter, statusAsuntoParameter, destinatarioParameter, signatarioParameter, rangoFechaDesdeParameter, rangoFechaHastaParameter, folioParameter, tituloParameter, descripcionParameter, documentoNameParameter);
        }
        public ObjectResult<GET_ASUNTO> GetBusquedaAsuntos(string titulo, string folio, string descripcion)
        {
    
            ObjectParameter tituloParameter;
    
            if (titulo != null)
            {
                tituloParameter = new ObjectParameter("Titulo", titulo);
            }
            else
            {
                tituloParameter = new ObjectParameter("Titulo", typeof(string));
            }
    
            ObjectParameter folioParameter;
    
            if (folio != null)
            {
                folioParameter = new ObjectParameter("Folio", folio);
            }
            else
            {
                folioParameter = new ObjectParameter("Folio", typeof(string));
            }
    
            ObjectParameter descripcionParameter;
    
            if (descripcion != null)
            {
                descripcionParameter = new ObjectParameter("Descripcion", descripcion);
            }
            else
            {
                descripcionParameter = new ObjectParameter("Descripcion", typeof(string));
            }
            return base.ExecuteFunction<GET_ASUNTO>("GetBusquedaAsuntos", tituloParameter, folioParameter, descripcionParameter);
        }
        public ObjectResult<GET_ASUNTO> GetAsuntosTurnadosCcp(Nullable<long> idRol)
        {
    
            ObjectParameter idRolParameter;
    
            if (idRol.HasValue)
            {
                idRolParameter = new ObjectParameter("IdRol", idRol);
            }
            else
            {
                idRolParameter = new ObjectParameter("IdRol", typeof(long));
            }
            return base.ExecuteFunction<GET_ASUNTO>("GetAsuntosTurnadosCcp", idRolParameter);
        }
        public ObjectResult<SpDashboardDireccionesTableData_Result> SpDashboardDireccionesTableData(Nullable<int> anio, Nullable<int> mes, string fltIdSignatarios, string fltIdPrioridades)
        {
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
    
            ObjectParameter mesParameter;
    
            if (mes.HasValue)
            {
                mesParameter = new ObjectParameter("mes", mes);
            }
            else
            {
                mesParameter = new ObjectParameter("mes", typeof(int));
            }
    
            ObjectParameter fltIdSignatariosParameter;
    
            if (fltIdSignatarios != null)
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", fltIdSignatarios);
            }
            else
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", typeof(string));
            }
    
            ObjectParameter fltIdPrioridadesParameter;
    
            if (fltIdPrioridades != null)
            {
                fltIdPrioridadesParameter = new ObjectParameter("fltIdPrioridades", fltIdPrioridades);
            }
            else
            {
                fltIdPrioridadesParameter = new ObjectParameter("fltIdPrioridades", typeof(string));
            }
            return base.ExecuteFunction<SpDashboardDireccionesTableData_Result>("SpDashboardDireccionesTableData", anioParameter, mesParameter, fltIdSignatariosParameter, fltIdPrioridadesParameter);
        }
        public ObjectResult<SpDashboardOcavmTableData_Result> SpDashboardOcavmTableData(Nullable<int> anio, Nullable<int> mes, string fltIdSignatarios, string fltIdPrioridades)
        {
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
    
            ObjectParameter mesParameter;
    
            if (mes.HasValue)
            {
                mesParameter = new ObjectParameter("mes", mes);
            }
            else
            {
                mesParameter = new ObjectParameter("mes", typeof(int));
            }
    
            ObjectParameter fltIdSignatariosParameter;
    
            if (fltIdSignatarios != null)
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", fltIdSignatarios);
            }
            else
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", typeof(string));
            }
    
            ObjectParameter fltIdPrioridadesParameter;
    
            if (fltIdPrioridades != null)
            {
                fltIdPrioridadesParameter = new ObjectParameter("fltIdPrioridades", fltIdPrioridades);
            }
            else
            {
                fltIdPrioridadesParameter = new ObjectParameter("fltIdPrioridades", typeof(string));
            }
            return base.ExecuteFunction<SpDashboardOcavmTableData_Result>("SpDashboardOcavmTableData", anioParameter, mesParameter, fltIdSignatariosParameter, fltIdPrioridadesParameter);
        }
        public ObjectResult<SpDashboardPendientesIndicador_Result> SpDashboardPendientesIndicador(string fltIdSignatarios)
        {
    
            ObjectParameter fltIdSignatariosParameter;
    
            if (fltIdSignatarios != null)
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", fltIdSignatarios);
            }
            else
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", typeof(string));
            }
            return base.ExecuteFunction<SpDashboardPendientesIndicador_Result>("SpDashboardPendientesIndicador", fltIdSignatariosParameter);
        }
        public ObjectResult<SpDashboardAtendidosIndicador_Result> SpDashboardAtendidosIndicador(string fltIdSignatarios)
        {
    
            ObjectParameter fltIdSignatariosParameter;
    
            if (fltIdSignatarios != null)
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", fltIdSignatarios);
            }
            else
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", typeof(string));
            }
            return base.ExecuteFunction<SpDashboardAtendidosIndicador_Result>("SpDashboardAtendidosIndicador", fltIdSignatariosParameter);
        }
        public ObjectResult<SpDashboardMesGraphData_Result> SpDashboardMesGraphData(Nullable<int> anio, Nullable<int> mes, string fltIdSignatarios, string fltIdPrioridades, string fltIdOrganigrama)
        {
    
            ObjectParameter anioParameter;
    
            if (anio.HasValue)
            {
                anioParameter = new ObjectParameter("anio", anio);
            }
            else
            {
                anioParameter = new ObjectParameter("anio", typeof(int));
            }
    
            ObjectParameter mesParameter;
    
            if (mes.HasValue)
            {
                mesParameter = new ObjectParameter("mes", mes);
            }
            else
            {
                mesParameter = new ObjectParameter("mes", typeof(int));
            }
    
            ObjectParameter fltIdSignatariosParameter;
    
            if (fltIdSignatarios != null)
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", fltIdSignatarios);
            }
            else
            {
                fltIdSignatariosParameter = new ObjectParameter("fltIdSignatarios", typeof(string));
            }
    
            ObjectParameter fltIdPrioridadesParameter;
    
            if (fltIdPrioridades != null)
            {
                fltIdPrioridadesParameter = new ObjectParameter("fltIdPrioridades", fltIdPrioridades);
            }
            else
            {
                fltIdPrioridadesParameter = new ObjectParameter("fltIdPrioridades", typeof(string));
            }
    
            ObjectParameter fltIdOrganigramaParameter;
    
            if (fltIdOrganigrama != null)
            {
                fltIdOrganigramaParameter = new ObjectParameter("fltIdOrganigrama", fltIdOrganigrama);
            }
            else
            {
                fltIdOrganigramaParameter = new ObjectParameter("fltIdOrganigrama", typeof(string));
            }
            return base.ExecuteFunction<SpDashboardMesGraphData_Result>("SpDashboardMesGraphData", anioParameter, mesParameter, fltIdSignatariosParameter, fltIdPrioridadesParameter, fltIdOrganigramaParameter);
        }
        public ObjectResult<string> SP_GetMax(string tabla)
        {
    
            ObjectParameter tablaParameter;
    
            if (tabla != null)
            {
                tablaParameter = new ObjectParameter("Tabla", tabla);
            }
            else
            {
                tablaParameter = new ObjectParameter("Tabla", typeof(string));
            }
            return base.ExecuteFunction<string>("SP_GetMax", tablaParameter);
        }
        public ObjectResult<string> SP_GetTableNameModifiedData(string jsonTable)
        {
    
            ObjectParameter jsonTableParameter;
    
            if (jsonTable != null)
            {
                jsonTableParameter = new ObjectParameter("JsonTable", jsonTable);
            }
            else
            {
                jsonTableParameter = new ObjectParameter("JsonTable", typeof(string));
            }
            return base.ExecuteFunction<string>("SP_GetTableNameModifiedData", jsonTableParameter);
        }
        public ObjectResult<string> SP_TABLE_JSON(string tabla)
        {
    
            ObjectParameter tablaParameter;
    
            if (tabla != null)
            {
                tablaParameter = new ObjectParameter("Tabla", tabla);
            }
            else
            {
                tablaParameter = new ObjectParameter("Tabla", typeof(string));
            }
            return base.ExecuteFunction<string>("SP_TABLE_JSON", tablaParameter);
        }
        public ObjectResult<string> SpConfirmSincRows(string jSON, string nomTbl)
        {
    
            ObjectParameter jSONParameter;
    
            if (jSON != null)
            {
                jSONParameter = new ObjectParameter("JSON", jSON);
            }
            else
            {
                jSONParameter = new ObjectParameter("JSON", typeof(string));
            }
    
            ObjectParameter nomTblParameter;
    
            if (nomTbl != null)
            {
                nomTblParameter = new ObjectParameter("nomTbl", nomTbl);
            }
            else
            {
                nomTblParameter = new ObjectParameter("nomTbl", typeof(string));
            }
            return base.ExecuteFunction<string>("SpConfirmSincRows", jSONParameter, nomTblParameter);
        }
        public ObjectResult<string> SpUpsertServerRows(string json, string nomTbl)
        {
    
            ObjectParameter jsonParameter;
    
            if (json != null)
            {
                jsonParameter = new ObjectParameter("json", json);
            }
            else
            {
                jsonParameter = new ObjectParameter("json", typeof(string));
            }
    
            ObjectParameter nomTblParameter;
    
            if (nomTbl != null)
            {
                nomTblParameter = new ObjectParameter("nomTbl", nomTbl);
            }
            else
            {
                nomTblParameter = new ObjectParameter("nomTbl", typeof(string));
            }
            return base.ExecuteFunction<string>("SpUpsertServerRows", jsonParameter, nomTblParameter);
        }
        public ObjectResult<spGetTablero_Result> spGetTablero(Nullable<long> idRol)
        {
    
            ObjectParameter idRolParameter;
    
            if (idRol.HasValue)
            {
                idRolParameter = new ObjectParameter("IdRol", idRol);
            }
            else
            {
                idRolParameter = new ObjectParameter("IdRol", typeof(long));
            }
            return base.ExecuteFunction<spGetTablero_Result>("spGetTablero", idRolParameter);
        }
        public ObjectResult<spGetMenu_Result> spGetMenu(Nullable<long> idRol)
        {
    
            ObjectParameter idRolParameter;
    
            if (idRol.HasValue)
            {
                idRolParameter = new ObjectParameter("IdRol", idRol);
            }
            else
            {
                idRolParameter = new ObjectParameter("IdRol", typeof(long));
            }
            return base.ExecuteFunction<spGetMenu_Result>("spGetMenu", idRolParameter);
        }
        public ObjectResult<spGetAsuntosOfiPart_Result> spGetAsuntosOfiPart(string tipoAsunto)
        {
    
            ObjectParameter tipoAsuntoParameter;
    
            if (tipoAsunto != null)
            {
                tipoAsuntoParameter = new ObjectParameter("TipoAsunto", tipoAsunto);
            }
            else
            {
                tipoAsuntoParameter = new ObjectParameter("TipoAsunto", typeof(string));
            }
            return base.ExecuteFunction<spGetAsuntosOfiPart_Result>("spGetAsuntosOfiPart", tipoAsuntoParameter);
        }
        public ObjectResult<GetAsuntosBusqueda_Result> GetAsuntosBusqueda(string prioridad, string statusAsunto, string destinatario, string signatario, Nullable<System.DateTime> rangoFechaDesde, Nullable<System.DateTime> rangoFechaHasta, string folio, string titulo, string descripcion, string documentoName)
        {
    
            ObjectParameter prioridadParameter;
    
            if (prioridad != null)
            {
                prioridadParameter = new ObjectParameter("Prioridad", prioridad);
            }
            else
            {
                prioridadParameter = new ObjectParameter("Prioridad", typeof(string));
            }
    
            ObjectParameter statusAsuntoParameter;
    
            if (statusAsunto != null)
            {
                statusAsuntoParameter = new ObjectParameter("StatusAsunto", statusAsunto);
            }
            else
            {
                statusAsuntoParameter = new ObjectParameter("StatusAsunto", typeof(string));
            }
    
            ObjectParameter destinatarioParameter;
    
            if (destinatario != null)
            {
                destinatarioParameter = new ObjectParameter("Destinatario", destinatario);
            }
            else
            {
                destinatarioParameter = new ObjectParameter("Destinatario", typeof(string));
            }
    
            ObjectParameter signatarioParameter;
    
            if (signatario != null)
            {
                signatarioParameter = new ObjectParameter("Signatario", signatario);
            }
            else
            {
                signatarioParameter = new ObjectParameter("Signatario", typeof(string));
            }
    
            ObjectParameter rangoFechaDesdeParameter;
    
            if (rangoFechaDesde.HasValue)
            {
                rangoFechaDesdeParameter = new ObjectParameter("RangoFechaDesde", rangoFechaDesde);
            }
            else
            {
                rangoFechaDesdeParameter = new ObjectParameter("RangoFechaDesde", typeof(System.DateTime));
            }
    
            ObjectParameter rangoFechaHastaParameter;
    
            if (rangoFechaHasta.HasValue)
            {
                rangoFechaHastaParameter = new ObjectParameter("RangoFechaHasta", rangoFechaHasta);
            }
            else
            {
                rangoFechaHastaParameter = new ObjectParameter("RangoFechaHasta", typeof(System.DateTime));
            }
    
            ObjectParameter folioParameter;
    
            if (folio != null)
            {
                folioParameter = new ObjectParameter("Folio", folio);
            }
            else
            {
                folioParameter = new ObjectParameter("Folio", typeof(string));
            }
    
            ObjectParameter tituloParameter;
    
            if (titulo != null)
            {
                tituloParameter = new ObjectParameter("Titulo", titulo);
            }
            else
            {
                tituloParameter = new ObjectParameter("Titulo", typeof(string));
            }
    
            ObjectParameter descripcionParameter;
    
            if (descripcion != null)
            {
                descripcionParameter = new ObjectParameter("Descripcion", descripcion);
            }
            else
            {
                descripcionParameter = new ObjectParameter("Descripcion", typeof(string));
            }
    
            ObjectParameter documentoNameParameter;
    
            if (documentoName != null)
            {
                documentoNameParameter = new ObjectParameter("DocumentoName", documentoName);
            }
            else
            {
                documentoNameParameter = new ObjectParameter("DocumentoName", typeof(string));
            }
            return base.ExecuteFunction<GetAsuntosBusqueda_Result>("GetAsuntosBusqueda", prioridadParameter, statusAsuntoParameter, destinatarioParameter, signatarioParameter, rangoFechaDesdeParameter, rangoFechaHastaParameter, folioParameter, tituloParameter, descripcionParameter, documentoNameParameter);
        }

        #endregion
    }
}
